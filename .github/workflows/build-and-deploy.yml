name: "Deploy APIM Test Environment"

on:
  workflow_dispatch:
  # push: 
  #   branches: [main]

env:
  TerraformWorkingDirectory: "./src/infra"
  StateStoreRGName: ${{ vars.STATE_STORE_RGNAME }}
  StorageAccountName: ${{ vars.STORAGE_ACCOUNT_NAME }}
  StateStoreContainerName: ${{ vars.STATE_STORAGE_CONTAINER_NAME }}
  StateStoreFilename: "apim-load-testing.tfstate"
  DestroyTerraform: ${{ vars.DESTROY_TERRAFORM }}
  
permissions:
      id-token: write
      contents: read

jobs:
  deploy-infra:
    name: "Terraform Deploy"
    runs-on: ubuntu-latest
    outputs:
      DestroyEnvironment: ${{ env.DestroyTerraform }}
      resourceGroupName: ${{ steps.create-resources.outputs.resourceGroupName }}
      apimInstanceName: ${{ steps.create-resources.outputs.apimInstanceName }}
      loadTestName: ${{ steps.create-resources.outputs.loadTestName }}
      apiUrl: ${{ steps.create-resources.outputs.apiUrl }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4      

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3    
        with: 
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -backend-config=resource_group_name=${{ env.StateStoreRGName}} -backend-config=storage_account_name=${{ env.StorageAccountName }} -backend-config=container_name=${{ env.StateStoreContainerName }} -backend-config=key=${{ env.StateStoreFilename }}
        working-directory: ${{ env.TerraformWorkingDirectory }}
        env:
             ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
             ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
             ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
             ARM_USE_OIDC: true

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -out=tf_plan -var-file="variables.tfvars" -var "publisherEmail=${{ secrets.PUBLISHER_EMAIL }}"
        working-directory: ${{ env.TerraformWorkingDirectory }}
        env:
             ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
             ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
             ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
             ARM_USE_OIDC: true

      - name: Terraform Apply
        id: create-resources
        run: |
          terraform apply -auto-approve tf_plan
          echo resourceGroupName=$(terraform output -raw resourceGroupName) >> $GITHUB_OUTPUT
          echo apimInstanceName=$(terraform output -raw apiManagementServiceName) >> $GITHUB_OUTPUT
          echo loadTestName=$(terraform output -raw loadTestName) >> $GITHUB_OUTPUT
          echo apiUrl=$(terraform output -raw apiUrl) >> $GITHUB_OUTPUT
        working-directory: ${{ env.TerraformWorkingDirectory }}
        env:
             ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
             ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
             ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
             ARM_USE_OIDC: true
  run-load-tests:
    name: "Run Azure Load Tests"
    runs-on: ubuntu-latest
    needs: [deploy-infra]
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4      

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Replace API URL
        run: |
          delimiter="//"
          url="${{ needs.deploy-infra.outputs.apiUrl }}"
          splitApiUrl="${url#*$delimiter}"
          sed -i "s|<API Url>|$splitApiUrl|g" ./src/load-test-configs/*.yaml

      - name: 'Run 500B test'
        uses: azure/load-testing@v1
        with:
          loadTestConfigFile: './src/load-test-configs/config-500B.yaml'
          loadTestResource: ${{ needs.deploy-infra.outputs.loadTestName }}
          resourceGroup: ${{ needs.deploy-infra.outputs.resourceGroupName }}

      - name: 'Run 1000B test'
        uses: azure/load-testing@v1
        with:
          loadTestConfigFile: './src/load-test-configs/config-1000B.yaml'
          loadTestResource: ${{ needs.deploy-infra.outputs.loadTestName }}
          resourceGroup: ${{ needs.deploy-infra.outputs.resourceGroupName }}
      - name: 'Run 1500B test'
        uses: azure/load-testing@v1
        with:
          loadTestConfigFile: './src/load-test-configs/config-1500B.yaml'
          loadTestResource: ${{ needs.deploy-infra.outputs.loadTestName }}
          resourceGroup: ${{ needs.deploy-infra.outputs.resourceGroupName }}
      - uses: actions/upload-artifact@v2
        with:
          name: loadTestResults
          path: ${{ github.workspace }}/loadTest

  destroy-terraform:
    name: "Terraform Destroy"
    runs-on: ubuntu-latest
    if: ${{ needs.deploy-infra.outputs.DestroyEnvironment == 'true' }}
    needs: [run-load-tests, deploy-infra]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4      

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3  

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -backend-config=resource_group_name=${{ env.StateStoreRGName}} -backend-config=storage_account_name=${{ env.StorageAccountName }} -backend-config=container_name=${{ env.StateStoreContainerName }} -backend-config=key=${{ env.StateStoreFilename }}
        working-directory: ${{ env.TerraformWorkingDirectory }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false -parallelism=20 -var-file="variables.tfvars" -var "publisherEmail=${{ secrets.PUBLISHER_EMAIL }}"
        working-directory: ${{ env.TerraformWorkingDirectory }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Delete Terraform State File
        shell: pwsh
        run: |
            Try
            {
              $exists = az storage blob exists --account-name ${{ env.StorageAccountName }} --container-name ${{ env.StateStoreContainerName }} --name ${{ env.StateStoreFilename }} --auth-mode login
            }
            Catch
            {
              Write-output "No state file to delete"
            }
